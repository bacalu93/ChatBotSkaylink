name: Deploy Terraform Infrastructure
on:
  push:
    branches:
      - main-deactivated
    paths:
      - terraform/**
      - lambda_functions/**
      - batch_docker_image/**
  workflow_dispatch:

env:
  TF_LOG: INFO
  ACCOUNT_ID: "992382467535"
  REGION: "eu-central-1"
  PROJECT_NAME: chatbot93
  MAP_TAG: "1234567"
permissions:
  id-token: write
  contents: read

jobs:
  PrepareFilter:
    runs-on: ubuntu-latest
    outputs:
      docker_image_changed: ${{ steps.filter.outputs.docker_image_changed }}
      terraform_changed: ${{ steps.filter.outputs.terraform_changed }}
    defaults:
      run:
        shell: bash
        working-directory: 'terraform'
    steps:
      - name: Git clone the repository
        uses: actions/checkout@v4
      - name: Filter changes
        id: filter
        uses: dorny/paths-filter@v3
        with:
          filters: |
            docker_image_changed:
              - 'batch_docker_image/**'
            terraform_changed:
              - terraform/**
              - lambda_functions/**

  DockerImage:
    if: needs.PrepareFilter.outputs.docker_image_changed == 'true'
    runs-on: ubuntu-latest
    needs: PrepareFilter
    defaults:
      run:
        shell: bash
        working-directory: 'batch_docker_image'
    steps:
      - name: Git clone the repository
        uses: actions/checkout@v4
      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::992382467535:role/oidc-github-role
          role-session-name: samplerolesession
          aws-region: eu-central-1
      - name: Run Tag and Push
        shell: bash
        run: |
          current_date=$(date +%Y-%m-%d-%H-%M-%S)
          aws ecr create-repository --repository-name $repo_name --image-tag-mutability IMMUTABLE || true
          aws ecr put-lifecycle-policy --repository-name $repo_name --lifecycle-policy-text file://assets/ecr-lifecycle-policy.json || true
          aws ecr get-login-password --region "${{ env.REGION }}" | docker login --username AWS --password-stdin "${{ env.ACCOUNT_ID }}.dkr.ecr.${{ env.REGION }}.amazonaws.com"
          docker build -t $repo_name . 
          docker tag $repo_name:latest "${{ env.ACCOUNT_ID }}.dkr.ecr.${{ env.REGION }}.amazonaws.com/$repo_name:$current_date"
          docker push "${{ env.ACCOUNT_ID }}.dkr.ecr.${{ env.REGION }}.amazonaws.com/$repo_name:$current_date"
          aws ssm put-parameter --name docker_image_tag --value $current_date --type String  --overwrite
        env:
          repo_name: "${{ env.PROJECT_NAME }}-update-knowledge-base"
        working-directory: "batch_docker_image"
        id: run_tag_and_push  

  Terraform:
    if: always()  # Ensure this job runs regardless of previous outcomes
    runs-on: ubuntu-latest
    needs: [PrepareFilter, DockerImage]
    environment: staging  # Requires manual approval through GitHub Environments
    defaults:
      run:
        shell: bash
        working-directory: 'terraform'
    steps:
      - name: Git clone the repository
        uses: actions/checkout@v4
      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::992382467535:role/oidc-github-role
          role-session-name: samplerolesession
          aws-region: eu-central-1
      - name: Create statefile bucket
        run: |
          if aws s3api head-bucket --bucket "${{ env.PROJECT_NAME }}-statefile-bucket-tf-${{ env.ACCOUNT_ID }}" 2>/dev/null; then
            echo "Bucket already exists."
          else
            aws s3api create-bucket --bucket "${{ env.PROJECT_NAME }}-statefile-bucket-tf-${{ env.ACCOUNT_ID }}" --region "${{ env.REGION }}" --create-bucket-configuration LocationConstraint="${{ env.REGION }}"
            aws dynamodb create-table \
              --table-name "${{ env.PROJECT_NAME }}-tf-lock" \
              --attribute-definitions AttributeName=LockID,AttributeType=S \
              --key-schema AttributeName=LockID,KeyType=HASH \
              --billing-mode PAY_PER REQUEST \
              --deletion-protection-enabled \
              --tags Key=CreatedBy,Value='Github Actions' Key=map-migrated,Value="${{ env.MAP_TAG }}" Key=ProjectName,Value="${{ env.PROJECT_NAME }}"
          fi
          aws s3api put-bucket-tagging --bucket "${{ env.PROJECT_NAME }}-statefile-bucket-tf-${{ env.ACCOUNT_ID }}" --tagging 'TagSet=[{Key=CreatedBy,Value="Github Actions2"},{Key=map-migrated,Value=${{ env.MAP_TAG }}},{Key=ProjectName,Value=${{ env.PROJECT_NAME }}}]'
          aws s3api put-bucket-versioning --bucket "${{ env.PROJECT_NAME }}-statefile-bucket-tf-${{ env.ACCOUNT_ID }}" --region "${{ env.REGION }}" --versioning-configuration Status=Enabled
          aws s3api put-bucket-encryption --bucket "${{ env.PROJECT_NAME }}-statefile-bucket-tf-${{ env.ACCOUNT_ID }}" --server-side-encryption-configuration '{"Rules":[{"ApplyServerSideEncryptionByDefault":{"SSEAlgorithm":"aws:kms","KMSMasterKeyID":"arn:aws:kms:${{ env.REGION }}:${{ env.ACCOUNT_ID }}:alias/aws/s3"}}]}'
      - name: Get Image Tag
        id: getimagetag
        run: |
          DOCKER_IMAGE_TAG=$(aws ssm get-parameter --name docker_image_tag --output text --query Parameter.Value)
          echo "DOCKER_IMAGE_TAG=$DOCKER_IMAGE_TAG"
          echo "image_tag=$DOCKER_IMAGE_TAG" >> $GITHUB_ENV
      - name: Terraform init
        id: init
        run: |
          terraform init -backend-config="bucket=${{ env.PROJECT_NAME }}-statefile-bucket-tf-${{ env.ACCOUNT_ID }}" -backend-config="dynamodb_table=${{ env.PROJECT_NAME }}-tf-lock"
          terraform providers

      - name: Terraform apply
        id: apply
        run: |
          terraform apply -auto-approve -var 'project_name=${{ env.PROJECT_NAME }}' -var 'account_id=${{ env.ACCOUNT_ID }}' -var 'region=${{ env.REGION }}' -var 'map_tag=${{ env.MAP_TAG }}' -var 'image_tag=${{ env.image_tag }}'

  TerraformDestroy:
    if: always()  # Ensures that destroy runs even if the apply step fails
    runs-on: ubuntu-latest
    needs: Terraform
    environment: production  # Requires manual approval for destroy step
    steps:
      - name: Git clone the repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::992382467535:role/oidc-github-role
          aws-region: eu-central-1
          role-session-name: oidc-session

      - name: Terraform init and destroy
        run: |
          terraform init -backend-config="bucket=${{ env.PROJECT_NAME }}-statefile-bucket-tf-${{ env.ACCOUNT_ID }}" \
                         -backend-config="dynamodb_table=${{ env.PROJECT_NAME }}-tf-lock"
          terraform destroy -auto-approve \
            -var "project_name=${{ env.PROJECT_NAME }}" \
            -var "account_id=${{ env.ACCOUNT_ID }}" \
            -var "region=${{ env.REGION }}" \
            -var "map_tag=${{ env.MAP_TAG }}" \
            -var "image_tag=${{ env.image_tag }}"
